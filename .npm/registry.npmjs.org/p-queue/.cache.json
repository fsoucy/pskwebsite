{"_id":"p-queue","_rev":"8-ef9f3b1bccfaabb1eb689c69d36df385","name":"p-queue","description":"Promise queue with concurrency control","dist-tags":{"latest":"1.1.0"},"versions":{"0.0.0":{"name":"p-queue","version":"0.0.0","description":"Promise queue with concurrency control","license":"MIT","repository":{"type":"git","url":"git+https://github.com/sindresorhus/p-queue.git"},"author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"sindresorhus.com"},"engines":{"node":">=4"},"scripts":{"test":"xo && ava"},"files":["index.js"],"keywords":["promise","queue","enqueue","limit","limited","concurrency","throttle","throat","rate","batch","ratelimit","fifo","job","task","async","await","promises","bluebird"],"devDependencies":{"ava":"*","delay":"^1.3.1","in-range":"^1.0.0","random-int":"^1.0.0","time-span":"^1.0.0","xo":"*"},"xo":{"esnext":true},"gitHead":"cfa39538a413c1793b41fe71a317eb388394d44a","bugs":{"url":"https://github.com/sindresorhus/p-queue/issues"},"homepage":"https://github.com/sindresorhus/p-queue#readme","_id":"p-queue@0.0.0","_shasum":"33466a005bf9110c108578889b8fcfdde92d65eb","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"dist":{"shasum":"33466a005bf9110c108578889b8fcfdde92d65eb","tarball":"https://registry.npmjs.org/p-queue/-/p-queue-0.0.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/p-queue-0.0.0.tgz_1477652263592_0.18456169962882996"},"directories":{}},"0.1.0":{"name":"p-queue","version":"0.1.0","description":"Promise queue with concurrency control","license":"MIT","repository":{"type":"git","url":"git+https://github.com/sindresorhus/p-queue.git"},"author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"sindresorhus.com"},"engines":{"node":">=4"},"scripts":{"test":"xo && ava"},"files":["index.js"],"keywords":["promise","queue","enqueue","limit","limited","concurrency","throttle","throat","rate","batch","ratelimit","fifo","job","task","async","await","promises","bluebird"],"devDependencies":{"ava":"*","delay":"^1.3.1","in-range":"^1.0.0","random-int":"^1.0.0","time-span":"^1.0.0","xo":"*"},"xo":{"esnext":true},"gitHead":"e02801b4a59fa9029d2f4f4d613fb9d78011e40b","bugs":{"url":"https://github.com/sindresorhus/p-queue/issues"},"homepage":"https://github.com/sindresorhus/p-queue#readme","_id":"p-queue@0.1.0","_shasum":"6d57ccc409bd6370dd0a251be0713a7f62ecc581","_from":".","_npmVersion":"2.15.9","_nodeVersion":"4.6.1","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"dist":{"shasum":"6d57ccc409bd6370dd0a251be0713a7f62ecc581","tarball":"https://registry.npmjs.org/p-queue/-/p-queue-0.1.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/p-queue-0.1.0.tgz_1477993091237_0.7105197478085756"},"directories":{}},"0.2.0":{"name":"p-queue","version":"0.2.0","description":"Promise queue with concurrency control","license":"MIT","repository":{"type":"git","url":"git+https://github.com/sindresorhus/p-queue.git"},"author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"sindresorhus.com"},"maintainers":[{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"engines":{"node":">=4"},"scripts":{"test":"xo && ava","bench":"node bench.js"},"files":["index.js"],"keywords":["promise","queue","enqueue","limit","limited","concurrency","throttle","throat","rate","batch","ratelimit","priority","priorityqueue","fifo","job","task","async","await","promises","bluebird"],"devDependencies":{"ava":"*","benchmark":"^2.1.2","delay":"^1.3.1","in-range":"^1.0.0","random-int":"^1.0.0","time-span":"^1.0.0","xo":"*"},"xo":{"esnext":true},"gitHead":"1bc5f3659d3e39626e32c3a87c23e635273cfc59","bugs":{"url":"https://github.com/sindresorhus/p-queue/issues"},"homepage":"https://github.com/sindresorhus/p-queue#readme","_id":"p-queue@0.2.0","_shasum":"10286f06123e102ff422c1a8142e0822ed283dbd","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"dist":{"shasum":"10286f06123e102ff422c1a8142e0822ed283dbd","tarball":"https://registry.npmjs.org/p-queue/-/p-queue-0.2.0.tgz"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/p-queue-0.2.0.tgz_1479360481244_0.5350546715781093"},"directories":{}},"1.0.0":{"name":"p-queue","version":"1.0.0","description":"Promise queue with concurrency control","license":"MIT","repository":{"type":"git","url":"git+https://github.com/sindresorhus/p-queue.git"},"author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"sindresorhus.com"},"maintainers":[{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"engines":{"node":">=4"},"scripts":{"test":"xo && ava","bench":"node bench.js"},"files":["index.js"],"keywords":["promise","queue","enqueue","limit","limited","concurrency","throttle","throat","rate","batch","ratelimit","priority","priorityqueue","fifo","job","task","async","await","promises","bluebird"],"devDependencies":{"ava":"*","benchmark":"^2.1.2","delay":"^1.3.1","in-range":"^1.0.0","random-int":"^1.0.0","time-span":"^1.0.0","xo":"*"},"xo":{"esnext":true},"gitHead":"a3a5cadefc2b54269f4939bb34e8dc180c3bd800","bugs":{"url":"https://github.com/sindresorhus/p-queue/issues"},"homepage":"https://github.com/sindresorhus/p-queue#readme","_id":"p-queue@1.0.0","_shasum":"698cde72cc9f57aa3bc7d30ad8019cd736aaed3e","_from":".","_npmVersion":"2.15.11","_nodeVersion":"4.6.2","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"dist":{"shasum":"698cde72cc9f57aa3bc7d30ad8019cd736aaed3e","tarball":"https://registry.npmjs.org/p-queue/-/p-queue-1.0.0.tgz"},"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/p-queue-1.0.0.tgz_1484301805809_0.023138268617913127"},"directories":{}},"1.1.0":{"name":"p-queue","version":"1.1.0","description":"Promise queue with concurrency control","license":"MIT","repository":{"type":"git","url":"git+https://github.com/sindresorhus/p-queue.git"},"author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"sindresorhus.com"},"maintainers":[{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"engines":{"node":">=4"},"scripts":{"test":"xo && ava","bench":"node bench.js"},"files":["index.js"],"keywords":["promise","queue","enqueue","limit","limited","concurrency","throttle","throat","rate","batch","ratelimit","priority","priorityqueue","fifo","job","task","async","await","promises","bluebird"],"devDependencies":{"ava":"*","benchmark":"^2.1.2","delay":"^1.3.1","in-range":"^1.0.0","random-int":"^1.0.0","time-span":"^1.0.0","xo":"*"},"xo":{"esnext":true},"gitHead":"0202f4b06d87b0e4a8daffd019f4953054c4e699","bugs":{"url":"https://github.com/sindresorhus/p-queue/issues"},"homepage":"https://github.com/sindresorhus/p-queue#readme","_id":"p-queue@1.1.0","_shasum":"c4246f170782f48d49557ee6634658f6b1dacc5f","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.9.0","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"},"dist":{"shasum":"c4246f170782f48d49557ee6634658f6b1dacc5f","tarball":"https://registry.npmjs.org/p-queue/-/p-queue-1.1.0.tgz"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/p-queue-1.1.0.tgz_1498797661636_0.056628481252118945"},"directories":{}}},"readme":"# p-queue [![Build Status](https://travis-ci.org/sindresorhus/p-queue.svg?branch=master)](https://travis-ci.org/sindresorhus/p-queue)\n\n> Promise queue with concurrency control\n\nUseful for rate-limiting async operations. For example, when interacting with a REST API or when doing CPU/memory intensive tasks.\n\n\n## Install\n\n```\n$ npm install --save p-queue\n```\n\n\n## Usage\n\nHere we run only one promise at the time. For example, set `concurrency` to 4 to run four promises at the time.\n\n```js\nconst PQueue = require('p-queue');\nconst got = require('got');\n\nconst queue = new PQueue({concurrency: 1});\n\nqueue.add(() => got('sindresorhus.com')).then(() => {\n\tconsole.log('Done: sindresorhus.com');\n});\n\nqueue.add(() => got('ava.li')).then(() => {\n\tconsole.log('Done: ava.li');\n});\n\ngetUnicornTask().then(task => queue.add(task)).then(() => {\n\tconsole.log('Done: Unicorn task');\n});\n```\n\n\n## API\n\n### PQueue([options])\n\nReturns a new `queue` instance.\n\n#### options\n\nType: `Object`\n\n##### concurrency\n\nType: `number`<br>\nDefault: `Infinity`<br>\nMinimum: `1`\n\nConcurrency limit.\n\n##### queueClass\n\nType: `Function`\n\nClass with a `enqueue` and `dequeue` method, and a `size` getter. See the [Custom QueueClass](#custom-queueclass) section.\n\n### queue\n\n`PQueue` instance.\n\n#### .add(fn, [options])\n\nReturns the promise returned by calling `fn`.\n\n##### fn\n\nType: `Function`\n\nPromise-returning/async function.\n\n#### options\n\nType: `Object`\n\n##### priority\n\nType: `number`<br>\nDefault: `0`\n\nPriority of operation. Operations with greater priority will be scheduled first.\n\n#### .onEmpty()\n\nReturns a promise that settles when the queue becomes empty.\n\nCan be called multiple times. Useful if you for example add additional items at a later time.\n\n#### .clear()\n\nClear the queue.\n\n#### .size\n\nSize of the queue.\n\n#### .pending\n\nNumber of pending promises.\n\n\n## Advanced example\n\nA more advanced example to help you understand the flow.\n\n```js\nconst delay = require('delay');\nconst PQueue = require('p-queue');\n\nconst queue = new PQueue({concurrency: 1});\n\ndelay(200).then(() => {\n\tconsole.log(`8. Pending promises: ${queue.pending}`);\n\t//=> '8. Pending promises: 0'\n\n\tqueue.add(() => Promise.resolve('üêô')).then(console.log.bind(null, '11. Resolved'));\n\n\tconsole.log('9. Added üêô');\n\n\tconsole.log(`10. Pending promises: ${queue.pending}`);\n\t//=> '10. Pending promises: 1'\n\n\tqueue.onEmpty().then(() => {\n\t\tconsole.log('12. Queue is empty again');\n\t});\n});\n\nqueue.add(() => Promise.resolve('ü¶Ñ')).then(console.log.bind(null, '5. Resolved'));\nconsole.log('1. Added ü¶Ñ');\n\nqueue.add(() => Promise.resolve('üê¥')).then(console.log.bind(null, '6. Resolved'));\nconsole.log('2. Added üê¥');\n\nqueue.onEmpty().then(() => {\n\tconsole.log('7. Queue is empty');\n});\n\nconsole.log(`3. Queue size: ${queue.size}`);\n//=> '3. Queue size: 1`\nconsole.log(`4. Pending promises: ${queue.pending}`);\n//=> '4. Pending promises: 1'\n```\n\n```\n$ node example.js\n1. Added ü¶Ñ\n2. Added üê¥\n3. Queue size: 1\n4. Pending promises: 1\n5. Resolved ü¶Ñ\n6. Resolved üê¥\n7. Queue is empty\n8. Pending promises: 0\n9. Added üêô\n10. Pending promises: 1\n11. Resolved üêô\n12. Queue is empty again\n```\n\n\n## Custom QueueClass\n\nFor implementing more complex scheduling policies, you can provide a QueueClass in the options:\n\n```js\nclass QueueClass {\n\tconstructor() {\n\t\tthis._queue = [];\n\t}\n\tenqueue(run, options) {\n\t\tthis._queue.push(run);\n\t}\n\tdequeue() {\n\t\treturn this._queue.shift();\n\t}\n\tget size() {\n\t\treturn this._queue.length;\n\t}\n}\n```\n\n`p-queue` will call corresponding methods to put and get operations from this queue.\n\n\n## Related\n\n- [p-limit](https://github.com/sindresorhus/p-limit) - Run multiple promise-returning & async functions with limited concurrency\n- [p-throttle](https://github.com/sindresorhus/p-throttle) - Throttle promise-returning & async functions\n- [p-debounce](https://github.com/sindresorhus/p-debounce) - Debounce promise-returning & async functions\n- [p-all](https://github.com/sindresorhus/p-all) - Run promise-returning & async functions concurrently with optional limited concurrency\n- [More‚Ä¶](https://github.com/sindresorhus/promise-fun)\n\n\n## Created by\n\n- [Sindre Sorhus](https://github.com/sindresorhus)\n- [Vsevolod Strukchinsky](https://github.com/floatdrop)\n\n\n## License\n\nMIT ¬© [Sindre Sorhus](https://sindresorhus.com)\n","maintainers":[{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"time":{"modified":"2017-06-30T04:41:02.579Z","created":"2016-10-28T10:57:43.869Z","0.0.0":"2016-10-28T10:57:43.869Z","0.1.0":"2016-11-01T09:38:11.466Z","0.2.0":"2016-11-17T05:28:01.489Z","1.0.0":"2017-01-13T10:03:27.546Z","1.1.0":"2017-06-30T04:41:02.579Z"},"homepage":"https://github.com/sindresorhus/p-queue#readme","keywords":["promise","queue","enqueue","limit","limited","concurrency","throttle","throat","rate","batch","ratelimit","priority","priorityqueue","fifo","job","task","async","await","promises","bluebird"],"repository":{"type":"git","url":"git+https://github.com/sindresorhus/p-queue.git"},"author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"sindresorhus.com"},"bugs":{"url":"https://github.com/sindresorhus/p-queue/issues"},"license":"MIT","readmeFilename":"readme.md","users":{"seangenabe":true,"rocket0191":true},"_attachments":{},"_etag":"W/\"5955d65e-338b\"","_lastModified":"Fri, 30 Jun 2017 04:41:02 GMT"}